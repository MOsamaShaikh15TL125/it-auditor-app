name: CI â€” Lint & Security

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test-and-lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11']
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-

      - name: Install dev dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit ruff bandit pip-audit detect-secrets mypy

      - name: Run pre-commit (all files)
        run: |
          pre-commit run --all-files

      - name: Run ruff (lint / format check)
        run: |
          ruff check .

      - name: Run Bandit (SAST)
        run: |
          bandit -r . -f json -o bandit-report.json || true
          # Fail the job if bandit finds medium/high issues:
          python - <<'PY'
import json,sys
data=json.load(open('bandit-report.json'))
issues=[i for r in data.get('results',[]) for i in [r] if r.get('issue_severity') in ('MEDIUM','HIGH')]
if issues:
    print('Bandit found issues:')
    for i in issues:
        print(i.get('filename'), i.get('issue_severity'), i.get('issue_text'))
    sys.exit(1)
print('Bandit OK')
PY

      - name: pip-audit (dependency CVEs)
        run: |
          pip-audit --format=json --exit-code 1 || (echo "pip-audit found vulnerabilities" && exit 1)

      - name: detect-secrets scan (CI)
        run: |
          detect-secrets scan --all-files --json > .secrets.ci.json || true
          # fail if new secrets detected (exit non-zero)
          python - <<'PY'
import json,sys
try:
    data=json.load(open('.secrets.ci.json'))
    findings = data.get('results', {})
    if findings:
        print('detect-secrets found potential secrets. Please inspect .secrets.ci.json')
        sys.exit(1)
    else:
        print('detect-secrets: OK (no secrets found)')
except Exception as e:
    print('detect-secrets scan failed or no results:', e)
    sys.exit(1)
PY